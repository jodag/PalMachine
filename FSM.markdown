# Using the FSM

The FSM is a finite, tractable representation of the set of all possible palindromes; it uses standard graph notation.

Running the Explorer class generates an FSM from a dictionary (see README.markdown).  Any palindrome of interest can be generated by walking on the FSM from the initial state (which I call "0") to the terminal state (which I call "!"), and any such walk will be a palindrome.

Each state is a vertex of the graph.  States are connected by edges (called "Transitions"), which emit strings as they are traversed.  Note that the strings are inserted into the _middle_ of the existing string, not the end.

The ITA Software Dictionary of 170k words (60k words after being preprocessed) results in an FSM with about 4000 states, each with typically about two dozen transitions (though the distribution has a very long tail - some states have close to a thousand, many have only one - a random walk along the FSM would on average have about a dozen possible transitions at any point).  Each transition has an associated set of emissions (typically about 3), any of which when added to middle of a partial palindrome in state X, to go to state Y.  Emissions are typically about a dozen chars long.

To generate a palindrome, start at state 0 with an empty string, follow any transition you like, inserting the emission into the middle of the string you are building, and end at any terminal state (marked with a "!").  When you're done, the string will be a palindrome.  Here's a simple example:

1. Start at state 0
2. We choose Transition `[0 --'poditecircumferential_itnerefmucricetidop'--> +al]`, going from state "0" to state "+al" as we emit "poditecircumferential_itnerefmucricetidop".
3. We choose Transition `[+al --'lirips_spirilla'--> 0]`, going from state "+al" to state "0", as we emit "lirips_spirilla".
4. We go from 0 to !, without needing to emit anything.  ! means we terminate the walk.  Our palindrome is "podite circumferential li rips spirilla it ne ref mu cricetid op".  I'm not sure what any of those words mean, but they're all in the ITA wordlist, and we have a palindrome!

# Using the FSM to solve problems

To solve a problem or answer a question about the set of all palindromes, phrase it as a question about the FSM, and use the FSM to answer it.  Many FSM algorithms can be implemented in pure relational algebra, allowing you to simply use SQL.  Since the FSM is implemented as a graph, any graph algorithms can be applied directly as well.